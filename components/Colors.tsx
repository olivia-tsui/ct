// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicColors,
  DefaultColorsProps,
} from "./plasmic/color_tool/PlasmicColors";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import Color from "./Color";
import chroma from "chroma-js";
import { ColorsContext } from "./Theme";
import { HomeContext } from "../pages/index";

import { InterpolationMode } from "chroma-js";
export interface ColorsProps extends DefaultColorsProps {
  uploaddata: (data: any) => string[];
}

function Colors_(props: ColorsProps, ref: HTMLElementRefOf<"div">) {
  const config = React.useContext(ColorsContext);
  const home = React.useContext(HomeContext);

  let shades: string[] = [];
  let names: string[] = [];
  let textDisplayColor: boolean[] = [];
  let contrasts: string[] = [];

  let light = chroma(config.baseValue)
    .set("hsl.h", config.lightHueShift)
    .luminance(config.lightLuminance);

  let dark = chroma(config.baseValue)
    .set("hsl.h", config.darkHueShift)
    .luminance(config.darkLuminance);
  if (config.saturation > 0) {
    light = light.saturate(config.saturation);
  } else if (config.saturation < 0) {
    light = light.desaturate(-config.saturation);
  }
  if (config.darkSaturation > 0) {
    dark = dark.saturate(config.darkSaturation);
  } else if (config.darkSaturation < 0) {
    dark = dark.desaturate(-config.darkSaturation);
  }

  let lightScale = chroma
    .scale([config.baseValue, light.hex()])
    .mode(home.mode as InterpolationMode).domain(config.lightDomain)
    .colors(config.stepsLighter + 1);
  let darkScale = chroma
    .scale([config.baseValue, dark.hex()])
    .mode(home.mode as InterpolationMode).domain(config.darkDomain)
    .colors(config.stepsDarker + 1);
  for (let i = lightScale.length - 1; i > 0; i--) {
    let newShade = lightScale[i];
    shades.push(newShade);
    names.push(`L${i}`);
    textDisplayColor.push(
      chroma.contrast("#FFFFFF", newShade) < 2.5 ? true : false
    );
    // adding background vs text contrast
    let whiteTextContrast = chroma.contrast(newShade, "#FFFFFF")
    let darkTextContrast = chroma.contrast(newShade, "#000000")
    contrasts.push(
      whiteTextContrast > darkTextContrast ? `${whiteTextContrast.toFixed(1)}` : `${darkTextContrast.toFixed(1)}`
    )
  }
  // add base
  shades.push(config.baseValue);
  names.push("Base");
  textDisplayColor.push(
    chroma.contrast("#FFFFFF", config.baseValue) < 2.5 ? true : false
  );
  let whiteTextContrast = chroma.contrast(config.baseValue, "#FFFFFF")
    let darkTextContrast = chroma.contrast(config.baseValue, "#000000")
    contrasts.push(
      whiteTextContrast > darkTextContrast ? `${whiteTextContrast.toFixed(1)}` : `${darkTextContrast.toFixed(1)}`
    )

  for (let i = 1; i < darkScale.length; i++) {
    let newShade = darkScale[i];
    shades.push(newShade);
    names.push(`D${i}`);
    textDisplayColor.push(
      chroma.contrast("#FFFFFF", newShade) < 2.5 ? true : false
    );
    // adding background vs text contrast
    let whiteTextContrast = chroma.contrast(newShade, "#FFFFFF")
    let darkTextContrast = chroma.contrast(newShade, "#000000")
    contrasts.push(
      whiteTextContrast > darkTextContrast ? `${whiteTextContrast.toFixed(1)}`: `${darkTextContrast.toFixed(1)}`
    )
  }

  props.uploaddata(JSON.stringify([names, shades]));
  return (
    // @ts-ignore
    <PlasmicColors
      root={{
        props: {
          children: shades.map((color, i) => {
            // @ts-ignore
            return (
              <Color
                onDark={textDisplayColor[i]}
                color={color}
                name={names[i]}
                hexCode={color.toUpperCase()}
                //@ts-ignore
                contrast={contrasts[i]}
              ></Color>
            );
          }),
        },
      }}
      {...props}
    />
  );
}

const Colors = React.forwardRef(Colors_);
export default Colors;
