// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicColors,
  DefaultColorsProps
} from "./plasmic/color_tool/PlasmicColors";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import Color from "./Color";
import chroma from "./chroma"
import { ColorsContext } from "./Theme";

export interface ColorsProps extends DefaultColorsProps {}


function Colors_(props: ColorsProps, ref: HTMLElementRefOf<"div">) {
  const config = React.useContext(ColorsContext)

  let shades= [config.baseValue]
  let names = ["Base"]

  for (let i = 1; i <= config.stepsLighter; i++) {
    let newShade = chroma(config.baseValue).brighten(i/config.stepsLighter*config.lightStep).hex()
    if (config.saturation > 0) {
      newShade = chroma(newShade).saturate(config.saturation).hex()
    } else if (config.saturation < 0) {
      newShade = chroma(newShade).desaturate(-config.saturation).hex()
    }

    shades = [newShade].concat(shades)
    names = [`L${i}`].concat(names)
  }

  for (let i = 1; i <= config.stepsDarker; i++) {
    let newShade= chroma(config.baseValue).darken(i/config.stepsDarker*config.darkStep).hex()
    if (config.saturation > 0) {
      newShade = chroma(newShade).saturate(config.saturation).hex()
    } else if (config.saturation < 0) {
      newShade = chroma(newShade).desaturate(-config.saturation).hex()
    }
    shades.push(newShade)
    names.push(`D${i}`)
  }

  return (
    

      <PlasmicColors
        root={{
          props: {
            children: (shades).map((color,i) => {
              return <Color color={color} name={names[i]} hexCode={color.toUpperCase()}></Color>
            }),
          },
        }}
        {...props}
      />
    
  );
}

const Colors = React.forwardRef(Colors_);
export default Colors;
