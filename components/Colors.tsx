[
  {
    name: "Default",
    baseValue: "#0F3CC9",
    saturation: 0,
    darkSaturation: 0,
    stepsLighter: 10,
    stepsDarker: 10,
    lightLuminance: 0.868,
    darkLuminance: 0.008,
    lightHueShift: "107.76",
    darkHueShift: "124.71",
    lightDomain: [0, 100],
    darkDomain: [0, 100],
    key: "3USKRJJ",
    shadesArray: {
      0: { color: "#e9edfa", colorName: "L10", contrastValue: "15.5" },
      1: { color: "#d3dbf6", colorName: "L9", contrastValue: "13.1" },
      2: { color: "#bcc8f2", colorName: "L8", contrastValue: "10.9" },
      3: { color: "#a4b6ef", colorName: "L7", contrastValue: "9.1" },
      4: { color: "#8ca3ec", colorName: "L6", contrastValue: "7.4" },
      5: { color: "#738feb", colorName: "L5", contrastValue: "5.9" },
      6: { color: "#597ce9", colorName: "L4", contrastValue: "4.7" },
      7: { color: "#3f68e9", colorName: "L3", contrastValue: "4.1" },
      8: { color: "#2554e9", colorName: "L2", contrastValue: "5.1" },
      9: { color: "#1445df", colorName: "L1", contrastValue: "6.1" },
      10: { color: "#0F3CC9", colorName: "Base", contrastValue: "7.2" },
      11: { color: "#0e38bb", colorName: "D1", contrastValue: "7.8" },
      12: { color: "#0d33ad", colorName: "D2", contrastValue: "8.6" },
      13: { color: "#0c2f9f", colorName: "D3", contrastValue: "9.3" },
      14: { color: "#0b2b91", colorName: "D4", contrastValue: "10.2" },
      15: { color: "#0a2783", colorName: "D5", contrastValue: "11.0" },
      16: { color: "#092375", colorName: "D6", contrastValue: "11.9" },
      17: { color: "#081e67", colorName: "D7", contrastValue: "12.9" },
      18: { color: "#071a59", colorName: "D8", contrastValue: "13.8" },
      19: { color: "#06164b", colorName: "D9", contrastValue: "14.7" },
      20: { color: "#05123d", colorName: "D10", contrastValue: "15.5" },
    },
  },
];

// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicColors,
  DefaultColorsProps,
} from "./plasmic/color_tool/PlasmicColors";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import Color from "./Color";
import chroma from "chroma-js";
import { ColorsContext } from "./Theme";
import { HomeContext } from "../pages/index";
import { InterpolationMode } from "chroma-js";
import * as Slider from "@radix-ui/react-slider";

export interface ColorsProps extends DefaultColorsProps {
  uploaddata: (data: any) => string[];
  manualAdjusting: "" | "l" | "s";
}

function Colors_(props: ColorsProps, ref: HTMLElementRefOf<"div">) {
  const config = React.useContext(ColorsContext);
  const home = React.useContext(HomeContext);

  let shades: string[] = [];
  let names: string[] = [];
  let manualLightAdjustments: number[] = [];
  let manualSaturationAdjustments: number[] = [];
  let [manualAdjustments, setManualAdjustments] = React.useState({
    light: manualLightAdjustments,
    saturation: manualSaturationAdjustments,
  });

  const contrast = (color: string) => {
    let whiteTextContrast = chroma.contrast(color, light);
    let darkTextContrast = chroma.contrast(color, dark);
    return whiteTextContrast > darkTextContrast
      ? `${whiteTextContrast.toFixed(1)}`
      : `${darkTextContrast.toFixed(1)}`;
  };

  let light = chroma(config.baseValue)
    .set("hsl.h", config.lightHueShift)
    .luminance(config.lightLuminance);

  let dark = chroma(config.baseValue)
    .set("hsl.h", config.darkHueShift)
    .luminance(config.darkLuminance);
  if (config.saturation > 0) {
    light = light.saturate(config.saturation);
  } else if (config.saturation < 0) {
    light = light.desaturate(-config.saturation);
  }
  if (config.darkSaturation > 0) {
    dark = dark.saturate(config.darkSaturation);
  } else if (config.darkSaturation < 0) {
    dark = dark.desaturate(-config.darkSaturation);
  }

  let lightScale = chroma
    .scale([config.baseValue, light.hex()])
    .mode(home.mode as InterpolationMode)
    .domain(config.lightDomain)
    .colors(config.stepsLighter + 1);
  let darkScale = chroma
    .scale([config.baseValue, dark.hex()])
    .mode(home.mode as InterpolationMode)
    .domain(config.darkDomain)
    .colors(config.stepsDarker + 1);

  for (let i = lightScale.length - 1; i > 0; i--) {
    let newShade = lightScale[i];
    shades.push(newShade);
    names.push(`L${i}`);
  }
  // add base
  shades.push(config.baseValue);
  names.push("Base");

  for (let i = 1; i < darkScale.length; i++) {
    let newShade = darkScale[i];
    shades.push(newShade);
    names.push(`D${i}`);
  }

  props.uploaddata(JSON.stringify([names, shades]));
  //useState to manage to shade array
  const [thisColor, setThisColor] = React.useState(shades);

  //useEffect for updating the color Array
  React.useEffect(() => {
    setThisColor(shades);
  }, [config]);

  return (
    <PlasmicColors
      root={{
        ref,
      }}
      allColors={{
        props: {
          children: thisColor.map((color, i) => {
            return (
              <Color
                key={i}
                onDark={
                  chroma.contrast(light, thisColor[i]) < 2.5 ? true : false
                }
                color={thisColor[i]}
                name={names[i]}
                hexCode={
                  props.manualAdjusting !== ""
                    ? (
                        chroma(thisColor[i]).get(
                          `hsl.${props.manualAdjusting}`
                        ) * 100
                      ).toFixed(0)
                    : thisColor[i].toUpperCase()
                }
                contrast={contrast(thisColor[i])}
                isLocked={thisColor[i] === config.baseValue}
                lock={{
                  props: {
                    stroke:
                      chroma.contrast(thisColor[i], "#FFFFFF") < 2.5
                        ? "#000000"
                        : "#ffffff",
                  },
                }}
                darkTextColor={light.hex()}
                lightTextColor={dark.hex()}
                adjustingSaturation={props.manualAdjusting !== ""}
                slider={{
                  props: {
                    children: (
                      <Slider.Root
                        orientation="vertical"
                        value={[
                          chroma(thisColor[i]).get(
                            `hsl.${props.manualAdjusting}`
                          ) * 100,
                        ]}
                        style={{
                          position: "relative",
                          display: "flex",
                          alignItems: "center",
                          flexDirection: "column",
                          width: 40,
                          height: "100%",
                        }}
                        onValueChange={(e) => {
                          if (names[i] === "Base") return;

                          // create a copy of the original state
                          const updatedManualAdjustments = {
                            light: [...manualAdjustments.light],
                            saturation: [...manualAdjustments.saturation],
                          };
                          if (props.manualAdjusting === "s") {
                            // update the value at the nth index of the light array
                            updatedManualAdjustments.saturation[i] = e[0] / 100;
                            // update the state with the modified copy
                            setManualAdjustments(updatedManualAdjustments);
                          } else if (props.manualAdjusting === "l") {
                            // update the value at the nth index of the light array
                            updatedManualAdjustments.light[i] = e[0] / 100;
                            // update the state with the modified copy
                            setManualAdjustments(updatedManualAdjustments);
                          }

                          const updatedColorSets = [...thisColor];
                          updatedColorSets[i] =
                            props.manualAdjusting === "s"
                              ? chroma(shades[i])
                                  .set(
                                    `hsl.s`,
                                    updatedManualAdjustments.saturation.length >
                                      0
                                      ? updatedManualAdjustments.saturation[i]
                                      : chroma(shades[i]).get("hsl.s")
                                  )
                                  .hex()
                              : chroma(shades[i])
                                  .set(
                                    `hsl.l`,
                                    updatedManualAdjustments.light.length > 0
                                      ? updatedManualAdjustments.light[i]
                                      : chroma(shades[i]).get("hsl.l")
                                  )
                                  .hex();

                          // Set the state with the updated items
                          setThisColor(updatedColorSets);
                        }}
                      >
                        <Slider.Track
                          style={{
                            flexGrow: 1,
                            position: "relative",
                            width: 3,
                          }}
                        ></Slider.Track>
                        <Slider.Thumb
                          style={{
                            display: "block",
                            width: 16,
                            height: 16,
                            backgroundColor:
                              chroma.contrast("white", thisColor[i]) < 2.5
                                ? "black"
                                : "white",
                            borderRadius: "99px",
                          }}
                        />
                      </Slider.Root>
                    ),
                  },
                }}
              ></Color>
            );
          }),
        },
      }}
      adjustingSaturation={props.manualAdjusting !== ""}
      {...props}
    />
  );
}

const Colors = React.forwardRef(Colors_);
export default Colors;
