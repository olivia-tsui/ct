// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dczqNaFYoArv9QmtqhGLsR
// Component: TG7tj4i4IGD7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: iXX9rwSFEyL/component
import Toggle from "../../Toggle"; // plasmic-import: zF_ww3iA59/component
import { Segmented } from "antd"; // plasmic-import: kcO9YN8MH5/codeComponent
import Themes from "../../Themes"; // plasmic-import: K_3cTz_dlp/component
import Theme from "../../Theme"; // plasmic-import: 848il-tpeEh/component

import { DarkValue, useDark } from "../color_tool/PlasmicGlobalVariant__Dark"; // plasmic-import: AsCuTyckBi/globalVariant
import { useScreenVariants as useScreenVariantspt71TlTNpDnZr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Pt71tlTNpDnZr/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: dczqNaFYoArv9QmtqhGLsR/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: TG7tj4i4IGD7/css

import Icon7Icon from "../color_tool/icons/PlasmicIcon__Icon7"; // plasmic-import: MxbpqMBUBE/icon
import IconIcon from "../color_tool/icons/PlasmicIcon__Icon"; // plasmic-import: Kv0ZYfEWi7y/icon
import Icon8Icon from "../color_tool/icons/PlasmicIcon__Icon8"; // plasmic-import: p5cZTvPKPD/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
  save?: p.Flex<typeof Button>;
  _import?: p.Flex<typeof Button>;
  toggle?: p.Flex<typeof Toggle>;
  mode?: p.Flex<typeof Segmented>;
  themes?: p.Flex<typeof Themes>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    dark: useDark(),
    screen: useScreenVariantspt71TlTNpDnZr()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootglobal_dark__true]: hasVariant(
            globalVariants,
            "dark",
            "_true"
          )
        }
      )}
    >
      <p.Stack
        as={"section"}
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        hasGap={true}
        className={classNames(projectcss.all, sty.section)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lfymz)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2,
                {
                  [sty.h2global_dark__true]: hasVariant(
                    globalVariants,
                    "dark",
                    "_true"
                  )
                }
              )}
            >
              {"World's Best Scale Tool"}
            </h2>

            <Button
              data-plasmic-name={"save"}
              data-plasmic-override={overrides.save}
              className={classNames("__wab_instance", sty.save)}
              showStartIcon={true}
              simple={true}
              startIcon={
                true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ukFAj)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__vGotH)}
                      role={"img"}
                    />
                  </div>
                ) : null
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jjxSr
                )}
              >
                {"Save"}
              </div>
            </Button>

            <Button
              data-plasmic-name={"_import"}
              data-plasmic-override={overrides._import}
              className={classNames("__wab_instance", sty._import)}
              showStartIcon={true}
              simple={true}
              startIcon={
                true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Syi)}
                  >
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg___9Fm1U)}
                      role={"img"}
                    />
                  </div>
                ) : null
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ycBpc
                )}
              >
                {"Import"}
              </div>
            </Button>
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e8E5J)}
          >
            <Toggle
              data-plasmic-name={"toggle"}
              data-plasmic-override={overrides.toggle}
              className={classNames("__wab_instance", sty.toggle, {
                [sty.toggleglobal_dark__true]: hasVariant(
                  globalVariants,
                  "dark",
                  "_true"
                )
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ddXK,
                {
                  [sty.textglobal_dark__true__ddXKuQts4]: hasVariant(
                    globalVariants,
                    "dark",
                    "_true"
                  )
                }
              )}
            >
              {"Interpolation Method:"}
            </div>

            <Segmented
              data-plasmic-name={"mode"}
              data-plasmic-override={overrides.mode}
              className={classNames("__wab_instance", sty.mode, {
                [sty.modeglobal_dark__true]: hasVariant(
                  globalVariants,
                  "dark",
                  "_true"
                )
              })}
              defaultValue={"hsl" as const}
              options={["rgb", "hsl", "hsv", "hsi", "lab", "lch", "lrgb"]}
              size={"large" as const}
            />
          </p.Stack>
        ) : null}
      </p.Stack>

      {true ? (
        <Themes
          data-plasmic-name={"themes"}
          data-plasmic-override={overrides.themes}
          className={classNames("__wab_instance", sty.themes, {
            [sty.themesglobal_dark__true]: hasVariant(
              globalVariants,
              "dark",
              "_true"
            )
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h2",
    "save",
    "_import",
    "toggle",
    "mode",
    "themes"
  ],
  section: ["section", "h2", "save", "_import", "toggle", "mode"],
  h2: ["h2"],
  save: ["save"],
  _import: ["_import"],
  toggle: ["toggle"],
  mode: ["mode"],
  themes: ["themes"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h2: "h2";
  save: typeof Button;
  _import: typeof Button;
  toggle: typeof Toggle;
  mode: typeof Segmented;
  themes: typeof Themes;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    save: makeNodeComponent("save"),
    _import: makeNodeComponent("_import"),
    toggle: makeNodeComponent("toggle"),
    mode: makeNodeComponent("mode"),
    themes: makeNodeComponent("themes"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
