// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dczqNaFYoArv9QmtqhGLsR
// Component: dyZl0Y5DD8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Color from "../../Color"; // plasmic-import: YczP2_j8Fh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: dczqNaFYoArv9QmtqhGLsR/projectcss
import sty from "./PlasmicColors.module.css"; // plasmic-import: dyZl0Y5DD8/css

export type PlasmicColors__VariantMembers = {
  adjustingSaturation: "adjustingSaturation";
};

export type PlasmicColors__VariantsArgs = {
  adjustingSaturation?: SingleBooleanChoiceArg<"adjustingSaturation">;
};

type VariantPropType = keyof PlasmicColors__VariantsArgs;
export const PlasmicColors__VariantProps = new Array<VariantPropType>(
  "adjustingSaturation"
);

export type PlasmicColors__ArgsType = {};
type ArgPropType = keyof PlasmicColors__ArgsType;
export const PlasmicColors__ArgProps = new Array<ArgPropType>();

export type PlasmicColors__OverridesType = {
  root?: p.Flex<"div">;
  allColors?: p.Flex<"div">;
};

export interface DefaultColorsProps {
  adjustingSaturation?: SingleBooleanChoiceArg<"adjustingSaturation">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicColors__RenderFunc(props: {
  variants: PlasmicColors__VariantsArgs;
  args: PlasmicColors__ArgsType;
  overrides: PlasmicColors__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "adjustingSaturation",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.adjustingSaturation
          : undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root,
          {
            [sty.rootadjustingSaturation]: hasVariant(
              $state,
              "adjustingSaturation",
              "adjustingSaturation"
            )
          }
        )}
      >
        {true ? (
          <div
            data-plasmic-name={"allColors"}
            data-plasmic-override={overrides.allColors}
            className={classNames(projectcss.all, sty.allColors, {
              [sty.allColorsadjustingSaturation]: hasVariant(
                $state,
                "adjustingSaturation",
                "adjustingSaturation"
              )
            })}
          >
            <Color
              className={classNames("__wab_instance", sty.color__rqWlM, {
                [sty.coloradjustingSaturation__rqWlMtcnbO]: hasVariant(
                  $state,
                  "adjustingSaturation",
                  "adjustingSaturation"
                )
              })}
            />

            <Color
              className={classNames("__wab_instance", sty.color__sha4Z, {
                [sty.coloradjustingSaturation__sha4ZtcnbO]: hasVariant(
                  $state,
                  "adjustingSaturation",
                  "adjustingSaturation"
                )
              })}
            />

            <Color
              className={classNames("__wab_instance", sty.color__edWfw, {
                [sty.coloradjustingSaturation__edWfWtcnbO]: hasVariant(
                  $state,
                  "adjustingSaturation",
                  "adjustingSaturation"
                )
              })}
            />
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "allColors"],
  allColors: ["allColors"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  allColors: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicColors__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicColors__VariantsArgs;
    args?: PlasmicColors__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicColors__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicColors__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicColors__ArgProps,
          internalVariantPropNames: PlasmicColors__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicColors__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicColors";
  } else {
    func.displayName = `PlasmicColors.${nodeName}`;
  }
  return func;
}

export const PlasmicColors = Object.assign(
  // Top-level PlasmicColors renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    allColors: makeNodeComponent("allColors"),

    // Metadata about props expected for PlasmicColors
    internalVariantProps: PlasmicColors__VariantProps,
    internalArgProps: PlasmicColors__ArgProps
  }
);

export default PlasmicColors;
/* prettier-ignore-end */
