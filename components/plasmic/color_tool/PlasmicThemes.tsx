// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dczqNaFYoArv9QmtqhGLsR
// Component: K_3cTz_dlp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Theme from "../../Theme"; // plasmic-import: 848il-tpeEh/component
import Button from "../../Button"; // plasmic-import: iXX9rwSFEyL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: dczqNaFYoArv9QmtqhGLsR/projectcss
import sty from "./PlasmicThemes.module.css"; // plasmic-import: K_3cTz_dlp/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: HwlYeO1i4N/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Kv0ZYfEWi7y/icon

export type PlasmicThemes__VariantMembers = {};

export type PlasmicThemes__VariantsArgs = {};
type VariantPropType = keyof PlasmicThemes__VariantsArgs;
export const PlasmicThemes__VariantProps = new Array<VariantPropType>();

export type PlasmicThemes__ArgsType = {
  count?: React.ReactNode;
};

type ArgPropType = keyof PlasmicThemes__ArgsType;
export const PlasmicThemes__ArgProps = new Array<ArgPropType>("count");

export type PlasmicThemes__OverridesType = {
  root?: p.Flex<"div">;
  add?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
};

export interface DefaultThemesProps {
  count?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicThemes__RenderFunc(props: {
  variants: PlasmicThemes__VariantsArgs;
  args: PlasmicThemes__ArgsType;
  overrides: PlasmicThemes__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: <Theme />,

          value: args.count
        })}

        <Button
          data-plasmic-name={"add"}
          data-plasmic-override={overrides.add}
          className={classNames("__wab_instance", sty.add)}
          showStartIcon={true}
          startIcon={
            <Icon2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          }
        >
          {"Add Scale"}
        </Button>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "add", "svg"],
  add: ["add", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  add: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThemes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThemes__VariantsArgs;
    args?: PlasmicThemes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThemes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicThemes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicThemes__ArgProps,
          internalVariantPropNames: PlasmicThemes__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicThemes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThemes";
  } else {
    func.displayName = `PlasmicThemes.${nodeName}`;
  }
  return func;
}

export const PlasmicThemes = Object.assign(
  // Top-level PlasmicThemes renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    add: makeNodeComponent("add"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicThemes
    internalVariantProps: PlasmicThemes__VariantProps,
    internalArgProps: PlasmicThemes__ArgProps
  }
);

export default PlasmicThemes;
/* prettier-ignore-end */
