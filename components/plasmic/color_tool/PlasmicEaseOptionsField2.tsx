// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dczqNaFYoArv9QmtqhGLsR
// Component: NcMB9BOfYl5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "../../Select"; // plasmic-import: TiF4cdBPWl8/component
import Select__Option from "../../Select__Option"; // plasmic-import: iXhqilTAbdS/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: dczqNaFYoArv9QmtqhGLsR/projectcss
import sty from "./PlasmicEaseOptionsField2.module.css"; // plasmic-import: NcMB9BOfYl5/css

export type PlasmicEaseOptionsField2__VariantMembers = {};

export type PlasmicEaseOptionsField2__VariantsArgs = {};
type VariantPropType = keyof PlasmicEaseOptionsField2__VariantsArgs;
export const PlasmicEaseOptionsField2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEaseOptionsField2__ArgsType = {
  children?: React.ReactNode;
  placeholder?: string;
  value?: any;
};

type ArgPropType = keyof PlasmicEaseOptionsField2__ArgsType;
export const PlasmicEaseOptionsField2__ArgProps = new Array<ArgPropType>(
  "children",
  "placeholder",
  "value"
);

export type PlasmicEaseOptionsField2__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
};

export interface DefaultEaseOptionsField2Props {
  children?: React.ReactNode;
  placeholder?: string;
  value?: any;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicEaseOptionsField2__RenderFunc(props: {
  variants: PlasmicEaseOptionsField2__VariantsArgs;
  args: PlasmicEaseOptionsField2__ArgsType;
  overrides: PlasmicEaseOptionsField2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $globalActions = ph.useGlobalActions?.();

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "baseValue",
            value: args.children
          })}
        </div>

        <Select
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          className={classNames("__wab_instance", sty.select)}
          defaultValue={args.value}
        >
          <Select__Option
            className={classNames("__wab_instance", sty.option__dIqlw)}
            value={"option" as const}
          >
            {"linear"}
          </Select__Option>

          <Select__Option
            className={classNames("__wab_instance", sty.option___46Wy4)}
            value={"option" as const}
          >
            {"ease-in"}
          </Select__Option>

          <Select__Option
            className={classNames("__wab_instance", sty.option__gGsU)}
            value={"option" as const}
          >
            {"ease-out"}
          </Select__Option>

          <Select__Option
            className={classNames("__wab_instance", sty.option__uuSmm)}
            value={"option" as const}
          >
            {"ease-in-out"}
          </Select__Option>
        </Select>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "select"],
  freeBox: ["freeBox"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  select: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEaseOptionsField2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEaseOptionsField2__VariantsArgs;
    args?: PlasmicEaseOptionsField2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEaseOptionsField2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEaseOptionsField2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEaseOptionsField2__ArgProps,
          internalVariantPropNames: PlasmicEaseOptionsField2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEaseOptionsField2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEaseOptionsField2";
  } else {
    func.displayName = `PlasmicEaseOptionsField2.${nodeName}`;
  }
  return func;
}

export const PlasmicEaseOptionsField2 = Object.assign(
  // Top-level PlasmicEaseOptionsField2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicEaseOptionsField2
    internalVariantProps: PlasmicEaseOptionsField2__VariantProps,
    internalArgProps: PlasmicEaseOptionsField2__ArgProps
  }
);

export default PlasmicEaseOptionsField2;
/* prettier-ignore-end */
