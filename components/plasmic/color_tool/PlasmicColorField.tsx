// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dczqNaFYoArv9QmtqhGLsR
// Component: b0WRjvMctS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { HuePicker } from "react-color"; // plasmic-import: 19Vq7b8_2Z/codeComponent
import Input from "../../Input"; // plasmic-import: 434vhQcoRkn/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: dczqNaFYoArv9QmtqhGLsR/projectcss
import sty from "./PlasmicColorField.module.css"; // plasmic-import: b0WRjvMctS/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 4MjaTm1IpeT/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K6gY_eUm0B4/icon

export type PlasmicColorField__VariantMembers = {};

export type PlasmicColorField__VariantsArgs = {};
type VariantPropType = keyof PlasmicColorField__VariantsArgs;
export const PlasmicColorField__VariantProps = new Array<VariantPropType>();

export type PlasmicColorField__ArgsType = {
  children?: React.ReactNode;
  placeholder?: string;
  value?: any;
  step?: any;
  onChange?: string;
};

type ArgPropType = keyof PlasmicColorField__ArgsType;
export const PlasmicColorField__ArgProps = new Array<ArgPropType>(
  "children",
  "placeholder",
  "value",
  "step",
  "onChange"
);

export type PlasmicColorField__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  huePicker?: p.Flex<typeof HuePicker>;
  input?: p.Flex<typeof Input>;
};

export interface DefaultColorFieldProps {
  children?: React.ReactNode;
  placeholder?: string;
  value?: any;
  step?: any;
  onChange?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicColorField__RenderFunc(props: {
  variants: PlasmicColorField__VariantsArgs;
  args: PlasmicColorField__ArgsType;
  overrides: PlasmicColorField__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          step: 1 as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "baseValue",
          value: args.children
        })}

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {":"}
        </div>

        <HuePicker
          data-plasmic-name={"huePicker"}
          data-plasmic-override={overrides.huePicker}
          className={classNames("__wab_instance", sty.huePicker)}
          color={"#00FFFF" as const}
          onChange={args.onChange}
        />

        <Input
          data-plasmic-name={"input"}
          data-plasmic-override={overrides.input}
          className={classNames("__wab_instance", sty.input)}
          step={args.step}
          type={"Number" as const}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "huePicker", "input"],
  text: ["text"],
  huePicker: ["huePicker"],
  input: ["input"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  huePicker: typeof HuePicker;
  input: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicColorField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicColorField__VariantsArgs;
    args?: PlasmicColorField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicColorField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicColorField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicColorField__ArgProps,
          internalVariantPropNames: PlasmicColorField__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicColorField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicColorField";
  } else {
    func.displayName = `PlasmicColorField.${nodeName}`;
  }
  return func;
}

export const PlasmicColorField = Object.assign(
  // Top-level PlasmicColorField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    huePicker: makeNodeComponent("huePicker"),
    input: makeNodeComponent("input"),

    // Metadata about props expected for PlasmicColorField
    internalVariantProps: PlasmicColorField__VariantProps,
    internalArgProps: PlasmicColorField__ArgProps
  }
);

export default PlasmicColorField;
/* prettier-ignore-end */
